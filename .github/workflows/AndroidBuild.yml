name: AndroidBuild
on:
  pull_request :
    branches : [ master ]
  push :
    branches : [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [ '8', '11', '17', '21' ]

    steps:
      - name : Checkout
        uses : actions/checkout@v4.1.4

      - name : Setup java jdk
        uses : actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'adopt'

      - name : build the apk with gradle
        run : ./gradlew build

      # Extract the Version Code from app level build.gradle and replace period (.) with underscore (_)
      - name : Build the debug apk
        run : |
          ./gradlew assembleDebug
          # Extract the version code from app build.gradle file and store it in a variable
          echo "THE RETRIEVED VERSION CODE ${(grep -oP 'versionName \d+' app/build.gradle | grep oP '\d+')}"
          export APK_VERSION_CODE=$(grep -oP 'versionCode \d+' app/build.gradle | grep oP '\d+')
          
      - name : Format The Version Code
        run : |
          # Replace (.) with (_) in the version code
          export FORMATTED_VERSION_CODE=$(echo $APK_VERSION_CODE | tr '.' '_')

      # Concatenate the apk file name with the FORMATTED_VERSION_CODE to make the apk unique
      - name : Concatenate the Version Code with the apk name to get a unique apk name
        run : |
          echo "This is your formatted apk name $FORMATTED_VERSION_CODE"
          export APK_NAME="apk-debug-$FORMATTED_VERSION_CODE.apk"

      # Build the apk now, but first create a temporary file to save the built apk to
      - name: Create a temporary folder
        run: mkdir downloads

      - name: Put temporary apk in the created directory
        run: |
          cd downloads       
          echo "This is your formatted apk name $APK_NAME"
          echo '$APK_NAME' > new_apk_name
          cd ..

      - name: Upload the built apk
        uses: actions/upload-artifact@v4.3.3
        with:
          name: AndroidCICD
          path: 'downloads/${{ env.APK_NAME }}'

      - name: Upload Apk to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.APP_BUILD_WEBHOOK_URL }}
          CHANNEL_ID : 'D070WLKPN8P'
          CHANNEL_ID2 : 'ci_cd'
        run: |
          curl -F file=@app/build/outputs/apk/debug/app-debug.apk \
               -F channels=$CHANNEL_ID2 \
               -F token=$SLACK_WEBHOOK_URL \
               https://slack.com/api/files.upload